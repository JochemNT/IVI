Traceback (most recent call last):
  File "/opt/homebrew/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/homebrew/lib/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.11/3.11.5/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/homebrew/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/homebrew/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/homebrew/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Load the CSV file
data = pd.read_csv('woontevredenheid_per_3_jaar.csv')

# Rename the columns
data.columns = ['Province', '2009', '2012', '2015', '2018', '2021']

# Remove the first row which contains the headers
data = data[1:]

# Convert the data to numeric values
for year in ['2009', '2012', '2015', '2018', '2021']:
    data[year] = data[year].str.replace(',', '.').astype(float)

# Split the data into two groups
group1_provinces = ['Noord Holland', 'Zuid Holland', 'Utrecht', 'Flevoland']
group2_provinces = [province for province in data['Province'] if province not in group1_provinces]

group1_data = data[data['Province'].isin(group1_provinces)]
group2_data = data[data['Province'].isin(group2_provinces)]

# Calculate the mean happiness for each group
group1_mean = group1_data[years].mean()
group2_mean = group2_data[years].mean()

# Prepare the data for plotting
years = ['2009', '2012', '2015', '2018', '2021']
fig = go.Figure()

# Add traces for each province
pastel_colors = ['#FFB6C1', '#87CEFA', '#98FB98', '#FFD700', '#FF69B4', '#E6E6FA', '#FFA07A', '#B0E0E6', '#AFEEEE', '#D8BFD8', '#DDA0DD', '#B0C4DE']
for index, row in data.iterrows():
    hover_text = [f"Provincie: {row['Province']}<br>Jaar: {year}<br>Tevredenheid: {row[year]}%" for year in years]
    fig.add_trace(go.Scatter(
        x=years,
        y=row[years],
        mode='lines+markers',
        name=row['Province'],
        text=hover_text,
        hoverinfo='text',
        opacity=0.5,
        line=dict(color=pastel_colors[index % len(pastel_colors)], width=1)
    ))

# Calculate mean happiness
overall_mean_happiness = data[years].mean()

# Add overall mean happiness trace
fig.add_trace(go.Scatter(
    x=years,
    y=overall_mean_happiness,
    mode='lines+markers',
    name='Gemiddelde woontevredenheid NL',
    line=dict(color='#666666', width=1.5),
    text=[f"Jaar: {year}<br>Gemiddelde woontevredenheid NL: {value:.1f}%" for year, value in zip(years, overall_mean_happiness)],
    hoverinfo='text',
    opacity=1.0
))

# Add group1 mean happiness trace
fig.add_trace(go.Scatter(
    x=years,
    y=group1_mean,
    mode='lines+markers',
    name='Gemiddelde woontevredenheid Randstad',
    line=dict(color='#FF7F50', width=2),
    text=[f"Jaar: {year}<br>Gemiddelde woontevredenheid Randstad: {value:.1f}%" for year, value in zip(years, group1_mean)],
    hoverinfo='text',
    opacity=1.0
))

# Add group2 mean happiness trace
fig.add_trace(go.Scatter(
    x=years,
    y=group2_mean,
    mode='lines+markers',
    name='Gemiddelde woontevredenheid buiten Randstad',
    line=dict(color='#1E90FF', width=2),
    text=[f"Jaar: {year}<br>Gemiddelde woontevredenheid buiten Randstad: {value:.1f}%" for year, value in zip(years, group2_mean)],
    hoverinfo='text',
    opacity=1.0
))

# Update layout to match the style of the provided image
fig.update_layout(
    title={
        'text': "Tevredenheid met huidige woonomgeving per provincie",
        'x': 0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    },
    xaxis_title="Jaar",
    yaxis_title="Tevredenheid (%)",
    legend_title="Provincie",
    template='plotly_white',
    font=dict(family="Arial, sans-serif", size=12, color="black"),
    title_font=dict(size=20, color='black', family="Arial, sans-serif")
)

# Show the figure
fig.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[2], line 22[0m
[1;32m     19[0m group2_data [38;5;241m=[39m data[data[[38;5;124m'[39m[38;5;124mProvince[39m[38;5;124m'[39m][38;5;241m.[39misin(group2_provinces)]
[1;32m     21[0m [38;5;66;03m# Calculate the mean happiness for each group[39;00m
[0;32m---> 22[0m group1_mean [38;5;241m=[39m group1_data[[43myears[49m][38;5;241m.[39mmean()
[1;32m     23[0m group2_mean [38;5;241m=[39m group2_data[years][38;5;241m.[39mmean()
[1;32m     25[0m [38;5;66;03m# Prepare the data for plotting[39;00m

[0;31mNameError[0m: name 'years' is not defined

